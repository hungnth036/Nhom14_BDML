#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Diabetes Prediction System - Project Check
Version: 1.0 | Status: Complete | Date: 20/10/2025
"""

import os
import sys

def print_banner():
    """Print project banner"""
    print("\n" + "="*70)
    print("DIABETES PREDICTION SYSTEM - Project Status Check")
    print("="*70 + "\n")

def check_files():
    """Check required files"""
    print("Checking required files...\n")
    
    required_files = {
        'README.md': 'Main documentation',
        'requirements.txt': 'Dependencies list',
        'notebooks/01_EDA.ipynb': 'EDA Notebook',
        'notebooks/02_Model_Training.ipynb': 'Training Notebook',
        'notebooks/03_Model_Evaluation.ipynb': 'Evaluation Notebook',
        'notebooks/04_Demo_Prediction.ipynb': 'Demo Notebook',
        'src/preprocessing.py': 'Preprocessing Module',
        'src/models.py': 'Models Module',
        'src/evaluation.py': 'Evaluation Module',
        'src/demo.py': 'Demo Module',
    }
    
    all_exist = True
    for file_path, description in required_files.items():
        if os.path.exists(file_path):
            print("[OK] " + description + " ... " + file_path)
        else:
            print("[MISSING] " + description + " ... " + file_path)
            all_exist = False
    
    print()
    return all_exist

def check_data():
    """Check data files"""
    print("Checking data files...\n")
    
    if os.path.exists('data/diabetes.csv'):
        print("[OK] data/diabetes.csv found")
        return True
    else:
        print("[MISSING] data/diabetes.csv")
        print("Download from: https://www.kaggle.com/uciml/pima-indians-diabetes-database")
        print()
        return False

def check_models():
    """Check trained models"""
    print("Checking trained models...\n")
    
    model_files = [
        'models/logistic_regression_model.pkl',
        'models/random_forest_model.pkl',
        'models/xgboost_model.pkl',
        'models/knn_model.pkl',
        'models/scaler.pkl',
        'models/feature_names.pkl'
    ]
    
    found_count = 0
    for model_file in model_files:
        if os.path.exists(model_file):
            print("[OK] " + model_file)
            found_count += 1
        else:
            print("[PENDING] " + model_file)
    
    print("\nStatus: {}/{} models created\n".format(found_count, len(model_files)))
    
    if found_count == 0:
        print("Run: notebooks/02_Model_Training.ipynb to create models\n")
    
    return found_count == len(model_files)

def print_quick_start():
    \"\"\"In h∆∞·ªõng d·∫´n nhanh\"\"\"
    print(\"\\n\" + \"=\"*70)
    print(\"üöÄ H∆Ø·ªöNG D·∫™N NHANH (Quick Start)\")
    print(\"=\"*70 + \"\\n\")
    
    print(\"üìù B∆Ø·ªöC 1: Chu·∫©n B·ªã (5 ph√∫t)\")
    print(\"-\" * 70)
    print(\"1. T·∫£i d·ªØ li·ªáu t·ª´ Kaggle:\")
    print(\"   ‚Üí https://www.kaggle.com/uciml/pima-indians-diabetes-database\")
    print(\"   ‚Üí ƒê·∫∑t file diabetes.csv v√†o: final/data/\\n\")\n    \n    print(\"2. C√†i th∆∞ vi·ªán:\")\n    print(\"   ‚Üí pip install -r requirements.txt\\n\")\n    \n    print(\"üìù B∆Ø·ªöC 2: Ch·∫°y Ph√¢n T√≠ch (20 ph√∫t)\")
    print(\"-\" * 70)
    print(\"1. Kh·ªüi ƒë·ªông Jupyter:\")\n    print(\"   ‚Üí jupyter notebook\\n\")\n    \n    print(\"2. Ch·∫°y 4 notebooks theo th·ª© t·ª±:\")\n    print(\"   ‚Üí 01_EDA.ipynb (Ph√¢n t√≠ch d·ªØ li·ªáu) [5 ph√∫t]\")\n    print(\"   ‚Üí 02_Model_Training.ipynb (Hu·∫•n luy·ªán) [10 ph√∫t]\")\n    print(\"   ‚Üí 03_Model_Evaluation.ipynb (ƒê√°nh gi√°) [3 ph√∫t]\")\n    print(\"   ‚Üí 04_Demo_Prediction.ipynb (Demo) [2 ph√∫t]\\n\")\n    \n    print(\"üìù B∆Ø·ªöC 3: D·ª± ƒêo√°n Cho B·ªánh Nh√¢n (2 ph√∫t)\")
    print(\"-\" * 70)
    print(\"Python code:\")\n    print("="*70)
    print("\nDocumentation:")
    print("  - README.md ................. Complete guide")
    print("  - GETTING_STARTED.md ....... Step-by-step guide")
    print("  - PROJECT_SUMMARY.md ....... Project summary")
    print("  - FILE_INDEX.md ............ Files list\n")\n\ndef main():\n    \"\"\"H√†m main\"\"\"\n    print_banner()\n    \n    # Ki·ªÉm tra files\n    files_ok = check_files()\n    \n    # Ki·ªÉm tra d·ªØ li·ªáu\n    data_ok = check_data()\n    \n    # Ki·ªÉm tra m√¥ h√¨nh\n    models_ok = check_models()\n    \n    # In h∆∞·ªõng d·∫´n nhanh\n    print_quick_start()\n    \n    # T√≥m t·∫Øt tr·∫°ng th√°i\n    print(\"üìã TR·∫†NG TH√ÅI H·ªÜ·ªÜN T·∫†I\")\n    print(\"=\"*70)\n    print(f\"Files c·∫ßn thi·∫øt: {'‚úÖ OK' if files_ok else '‚ùå Thi·∫øu'}\")\n    print(f\"D·ªØ li·ªáu: {'‚úÖ OK' if data_ok else '‚è≥ Ch∆∞a t·∫£i'}\")\n    print(f\"M√¥ h√¨nh: {'‚úÖ OK' if models_ok else '‚è≥ Ch∆∞a t·∫°o'}\")\n    print(\"=\"*70 + \"\\n\")\n    \n    if files_ok and data_ok and models_ok:\n        print(\"üéâ T·∫•t c·∫£ chu·∫©n b·ªã xong! S·∫µn s√†ng s·ª≠ d·ª•ng!\\n\")\n    elif files_ok and data_ok:\n        print(\"‚è≥ B∆∞·ªõc ti·∫øp theo: Ch·∫°y notebooks ƒë·ªÉ t·∫°o m√¥ h√¨nh\\n\")\n    else:\n        print(\"‚è≥ B∆∞·ªõc ti·∫øp theo: T·∫£i d·ªØ li·ªáu v√† c√†i th∆∞ vi·ªán\\n\")\n\nif __name__ == \"__main__\":\n    try:\n        main()\n    except Exception as e:\n        print(f\"‚ùå L·ªói: {e}\")\n        sys.exit(1)
